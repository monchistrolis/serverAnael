"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GraphQLLanguageService = void 0;
const graphql_1 = require("graphql");
const graphql_language_service_1 = require("graphql-language-service");
const vscode_languageserver_types_1 = require("vscode-languageserver-types");
const graphql_2 = require("graphql");
const { FRAGMENT_DEFINITION, OBJECT_TYPE_DEFINITION, INTERFACE_TYPE_DEFINITION, ENUM_TYPE_DEFINITION, UNION_TYPE_DEFINITION, SCALAR_TYPE_DEFINITION, INPUT_OBJECT_TYPE_DEFINITION, SCALAR_TYPE_EXTENSION, OBJECT_TYPE_EXTENSION, INTERFACE_TYPE_EXTENSION, UNION_TYPE_EXTENSION, ENUM_TYPE_EXTENSION, INPUT_OBJECT_TYPE_EXTENSION, DIRECTIVE_DEFINITION, FRAGMENT_SPREAD, OPERATION_DEFINITION, NAMED_TYPE, FIELD, } = graphql_2.Kind;
const KIND_TO_SYMBOL_KIND = {
    [graphql_2.Kind.FIELD]: vscode_languageserver_types_1.SymbolKind.Field,
    [graphql_2.Kind.OPERATION_DEFINITION]: vscode_languageserver_types_1.SymbolKind.Class,
    [graphql_2.Kind.FRAGMENT_DEFINITION]: vscode_languageserver_types_1.SymbolKind.Class,
    [graphql_2.Kind.FRAGMENT_SPREAD]: vscode_languageserver_types_1.SymbolKind.Struct,
    [graphql_2.Kind.OBJECT_TYPE_DEFINITION]: vscode_languageserver_types_1.SymbolKind.Class,
    [graphql_2.Kind.ENUM_TYPE_DEFINITION]: vscode_languageserver_types_1.SymbolKind.Enum,
    [graphql_2.Kind.ENUM_VALUE_DEFINITION]: vscode_languageserver_types_1.SymbolKind.EnumMember,
    [graphql_2.Kind.INPUT_OBJECT_TYPE_DEFINITION]: vscode_languageserver_types_1.SymbolKind.Class,
    [graphql_2.Kind.INPUT_VALUE_DEFINITION]: vscode_languageserver_types_1.SymbolKind.Field,
    [graphql_2.Kind.FIELD_DEFINITION]: vscode_languageserver_types_1.SymbolKind.Field,
    [graphql_2.Kind.INTERFACE_TYPE_DEFINITION]: vscode_languageserver_types_1.SymbolKind.Interface,
    [graphql_2.Kind.DOCUMENT]: vscode_languageserver_types_1.SymbolKind.File,
    FieldWithArguments: vscode_languageserver_types_1.SymbolKind.Method,
};
function getKind(tree) {
    if (tree.kind === 'FieldDefinition' &&
        tree.children &&
        tree.children.length > 0) {
        return KIND_TO_SYMBOL_KIND.FieldWithArguments;
    }
    return KIND_TO_SYMBOL_KIND[tree.kind];
}
class GraphQLLanguageService {
    constructor(cache, logger) {
        this._graphQLCache = cache;
        this._graphQLConfig = cache.getGraphQLConfig();
        this._logger = logger;
    }
    getConfigForURI(uri) {
        const config = this._graphQLCache.getProjectForFile(uri);
        if (config) {
            return config;
        }
        throw Error(`No config found for uri: ${uri}`);
    }
    async getDiagnostics(document, uri, isRelayCompatMode) {
        var _a, _b;
        let documentHasExtensions = false;
        const projectConfig = this.getConfigForURI(uri);
        if (!projectConfig || !document || document.trim().length < 2) {
            return [];
        }
        const { schema: schemaPath, name: projectName, extensions } = projectConfig;
        try {
            const documentAST = (0, graphql_2.parse)(document);
            if (!schemaPath || uri !== schemaPath) {
                documentHasExtensions = documentAST.definitions.some(definition => {
                    switch (definition.kind) {
                        case OBJECT_TYPE_DEFINITION:
                        case INTERFACE_TYPE_DEFINITION:
                        case ENUM_TYPE_DEFINITION:
                        case UNION_TYPE_DEFINITION:
                        case SCALAR_TYPE_DEFINITION:
                        case INPUT_OBJECT_TYPE_DEFINITION:
                        case SCALAR_TYPE_EXTENSION:
                        case OBJECT_TYPE_EXTENSION:
                        case INTERFACE_TYPE_EXTENSION:
                        case UNION_TYPE_EXTENSION:
                        case ENUM_TYPE_EXTENSION:
                        case INPUT_OBJECT_TYPE_EXTENSION:
                        case DIRECTIVE_DEFINITION:
                            return true;
                    }
                    return false;
                });
            }
        }
        catch (error) {
            if (error instanceof graphql_1.GraphQLError) {
                const range = (0, graphql_language_service_1.getRange)((_b = (_a = error.locations) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : { column: 0, line: 0 }, document);
                return [
                    {
                        severity: graphql_language_service_1.DIAGNOSTIC_SEVERITY.Error,
                        message: error.message,
                        source: 'GraphQL: Syntax',
                        range,
                    },
                ];
            }
            throw error;
        }
        let source = document;
        const fragmentDefinitions = await this._graphQLCache.getFragmentDefinitions(projectConfig);
        const fragmentDependencies = await this._graphQLCache.getFragmentDependencies(document, fragmentDefinitions);
        const dependenciesSource = fragmentDependencies.reduce((prev, cur) => `${prev} ${(0, graphql_2.print)(cur.definition)}`, '');
        source = `${source} ${dependenciesSource}`;
        let validationAst = null;
        try {
            validationAst = (0, graphql_2.parse)(source);
        }
        catch (error) {
            return [];
        }
        let customRules = null;
        if ((extensions === null || extensions === void 0 ? void 0 : extensions.customValidationRules) &&
            typeof extensions.customValidationRules === 'function') {
            customRules = extensions.customValidationRules(this._graphQLConfig);
        }
        const schema = await this._graphQLCache.getSchema(projectName, documentHasExtensions);
        if (!schema) {
            return [];
        }
        return (0, graphql_language_service_1.validateQuery)(validationAst, schema, customRules, isRelayCompatMode);
    }
    async getAutocompleteSuggestions(query, position, filePath) {
        const projectConfig = this.getConfigForURI(filePath);
        const schema = await this._graphQLCache.getSchema(projectConfig.name);
        const fragmentDefinitions = await this._graphQLCache.getFragmentDefinitions(projectConfig);
        const fragmentInfo = Array.from(fragmentDefinitions).map(([, info]) => info.definition);
        if (schema) {
            return (0, graphql_language_service_1.getAutocompleteSuggestions)(schema, query, position, undefined, fragmentInfo);
        }
        return [];
    }
    async getHoverInformation(query, position, filePath, options) {
        const projectConfig = this.getConfigForURI(filePath);
        const schema = await this._graphQLCache.getSchema(projectConfig.name);
        if (schema) {
            return (0, graphql_language_service_1.getHoverInformation)(schema, query, position, undefined, options);
        }
        return '';
    }
    async getDefinition(query, position, filePath) {
        const projectConfig = this.getConfigForURI(filePath);
        let ast;
        try {
            ast = (0, graphql_2.parse)(query);
        }
        catch (error) {
            return null;
        }
        const node = (0, graphql_language_service_1.getASTNodeAtPosition)(query, ast, position);
        if (node) {
            switch (node.kind) {
                case FRAGMENT_SPREAD:
                    return this._getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig);
                case FRAGMENT_DEFINITION:
                case OPERATION_DEFINITION:
                    return (0, graphql_language_service_1.getDefinitionQueryResultForDefinitionNode)(filePath, query, node);
                case NAMED_TYPE:
                    return this._getDefinitionForNamedType(query, ast, node, filePath, projectConfig);
                case FIELD:
                    return this._getDefinitionForField(query, ast, node, filePath, projectConfig, position);
            }
        }
        return null;
    }
    async getDocumentSymbols(document, filePath) {
        const outline = await this.getOutline(document);
        if (!outline) {
            return [];
        }
        const output = [];
        const input = outline.outlineTrees.map((tree) => [null, tree]);
        while (input.length > 0) {
            const res = input.pop();
            if (!res) {
                return [];
            }
            const [parent, tree] = res;
            if (!tree) {
                return [];
            }
            output.push({
                name: tree.representativeName,
                kind: getKind(tree),
                location: {
                    uri: filePath,
                    range: {
                        start: tree.startPosition,
                        end: tree.endPosition,
                    },
                },
                containerName: parent ? parent.representativeName : undefined,
            });
            input.push(...tree.children.map(child => [tree, child]));
        }
        return output;
    }
    async _getDefinitionForNamedType(query, ast, node, filePath, projectConfig) {
        const objectTypeDefinitions = await this._graphQLCache.getObjectTypeDefinitions(projectConfig);
        const dependencies = await this._graphQLCache.getObjectTypeDependenciesForAST(ast, objectTypeDefinitions);
        const localObjectTypeDefinitions = ast.definitions.filter(definition => definition.kind === OBJECT_TYPE_DEFINITION ||
            definition.kind === INPUT_OBJECT_TYPE_DEFINITION ||
            definition.kind === ENUM_TYPE_DEFINITION ||
            definition.kind === SCALAR_TYPE_DEFINITION ||
            definition.kind === INTERFACE_TYPE_DEFINITION);
        const typeCastedDefs = localObjectTypeDefinitions;
        const localOperationDefinationInfos = typeCastedDefs.map((definition) => ({
            filePath,
            content: query,
            definition,
        }));
        const result = await (0, graphql_language_service_1.getDefinitionQueryResultForNamedType)(query, node, dependencies.concat(localOperationDefinationInfos));
        return result;
    }
    async _getDefinitionForField(query, _ast, _node, _filePath, projectConfig, position) {
        var _a;
        const token = (0, graphql_language_service_1.getTokenAtPosition)(query, position);
        const schema = await this._graphQLCache.getSchema(projectConfig.name);
        const typeInfo = (0, graphql_language_service_1.getTypeInfo)(schema, token.state);
        const fieldName = (_a = typeInfo.fieldDef) === null || _a === void 0 ? void 0 : _a.name;
        if (typeInfo && fieldName) {
            const parentTypeName = typeInfo.parentType.toString();
            const objectTypeDefinitions = await this._graphQLCache.getObjectTypeDefinitions(projectConfig);
            const dependencies = [...objectTypeDefinitions.values()];
            const result = await (0, graphql_language_service_1.getDefinitionQueryResultForField)(fieldName, parentTypeName, dependencies);
            return result;
        }
        return null;
    }
    async _getDefinitionForFragmentSpread(query, ast, node, filePath, projectConfig) {
        const fragmentDefinitions = await this._graphQLCache.getFragmentDefinitions(projectConfig);
        const dependencies = await this._graphQLCache.getFragmentDependenciesForAST(ast, fragmentDefinitions);
        const localFragDefinitions = ast.definitions.filter(definition => definition.kind === FRAGMENT_DEFINITION);
        const typeCastedDefs = localFragDefinitions;
        const localFragInfos = typeCastedDefs.map((definition) => ({
            filePath,
            content: query,
            definition,
        }));
        const result = await (0, graphql_language_service_1.getDefinitionQueryResultForFragmentSpread)(query, node, dependencies.concat(localFragInfos));
        return result;
    }
    async getOutline(documentText) {
        return (0, graphql_language_service_1.getOutline)(documentText);
    }
}
exports.GraphQLLanguageService = GraphQLLanguageService;
//# sourceMappingURL=GraphQLLanguageService.js.map